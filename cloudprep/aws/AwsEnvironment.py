from .AwsArtefactRepository import AwsArtefactRepository


class AwsEnvironment:
    def __init__(self):
        self.description = "AWS Environment generated by CloudPrep"
        self.resources = {}
        self.parameters = {}
        self.outputs = {}
        self.mappings = {}
        self.artefact_repository = None

        self._todo = []
        self._warnings = []

    def find_by_physical_id(self, needle):
        # First, look through the existing resources; then scan those still to do.
        if needle in self.resources:
            return self.resources[needle]

        for task in self._todo:
            if task.physical_id == needle:
                return task

        return None

    def find_by_logical_id(self, needle):
        for physical_id, candidate in self.resources.items():
            if candidate.logical_id == needle:
                return candidate

        for task in self._todo:
            if task.logical_id == needle:
                return task

        return None

    def logical_from_physical(self, needle):
        return self.find_by_physical_id(needle).logical_id

    def add_to_todo(self, element):
        # Only insert it if we haven't already registered it.
        if self.find_by_physical_id(element.physical_id) is None:
            self._todo.append(element)

    def get_next_todo(self):
        if len(self._todo) > 0:
            candidate = self._todo[0]
            return candidate
        else:
            return None

    def remove_from_todo(self, task):
        self._todo.remove(task)

    def add_resource(self, resource):
        self.resources[resource.physical_id] = resource

    def add_intermediate_resource(self, resource):
        self.resources[resource.physical_id] = resource

    def add_parameter(self, **kwargs):
        """ Parameters:
         * Name: The parameter name (mandatory)
         * Description: The parameter description (mandatory)
         * Type: Parameter type (optional, default: "String")
         * Default: The default value (optional)
         * AllowedValues: A set of optional values to constrain input (optional)
         """
        name = kwargs["Name"]
        del kwargs["Name"]

        if "Type" not in kwargs:
            kwargs["Type"] = "String"

        if name not in self.parameters:
            self.parameters[name] = kwargs

    def add_warning(self, message, resource_physical_id):
        self._warnings.append("Warning: {0} on {1}".format(message, resource_physical_id))

    def _add_artefact_repository(self):
        self.artefact_repository = AwsArtefactRepository()
        self.add_parameter(
            Name=self.artefact_repository.artefact_bucket_parameter,
            Description="The bucket in which our artefacts are stored."
        )

    def store_artefact(self, artefact):
        if self.artefact_repository is None:
            self._add_artefact_repository()
        self.artefact_repository.store_artefact(artefact)

    @property
    def artefact_bucket_reference(self):
        if self.artefact_repository is None:
            self._add_artefact_repository()
        return {"Ref": self.artefact_repository.artefact_bucket_parameter}